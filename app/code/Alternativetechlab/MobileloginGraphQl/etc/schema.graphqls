#Mobilelogin Module

type Mutation {
    loginOTP (
        mobileNumber: String @doc(description: "Mobile Number")
        websiteId: Int = 1 @doc (description: "Website Id")
    ): MobileLoginOtpOutput @resolver(class: "Alternativetechlab\\MobileloginGraphQl\\Model\\Resolver\\SendOtp") @doc(description:"Send Mobile OTP")

    emailLoginOTP (
        email: String @doc(description: "Email")
        websiteId: Int = 1 @doc (description: "Website Id")
    ): MobileLoginOtpOutput @resolver(class: "Alternativetechlab\\MobileloginGraphQl\\Model\\Resolver\\SendEmailOtp") @doc(description:"Send Email OTP")

    forgotPassworOTP (
        mobileNumber: String @doc(description: "Mobile Number")
        websiteId: Int = 1 @doc (description: "Website Id")
    ): MobileForgotPassworOTPOutput @resolver(class: "Alternativetechlab\\MobileloginGraphQl\\Model\\Resolver\\ForgotPasswordOtp") @doc(description:"Send Forgot Password OTP")

    forgotPasswordEmailOTP (
        email: String @doc(description: "Email")
        websiteId: Int = 1 @doc (description: "Website Id")
    ): MobileForgotPassworOTPOutput @resolver(class: "Alternativetechlab\\MobileloginGraphQl\\Model\\Resolver\\ForgotPasswordEmailOtp") @doc(description:"Send Forgot Password OTP in Email")

    resetPasswordOtp (
        mobileNumber: String @doc(description: "Mobile Number")
        otp: String @doc(description: "OTP")
        password: String @doc(description: "Password")
        websiteId: Int = 1 @doc (description: "Website Id")
    ): MobileResetPassworOutput @resolver(class: "Alternativetechlab\\MobileloginGraphQl\\Model\\Resolver\\ResetPassword") @doc(description:"Reset Password")

    resetPasswordEmailOtp (
        email: String @doc(description: "Email")
        otp: String @doc(description: "OTP")
        password: String @doc(description: "Password")
        websiteId: Int = 1 @doc (description: "Website Id")
    ): MobileResetPassworOutput @resolver(class: "Alternativetechlab\\MobileloginGraphQl\\Model\\Resolver\\ResetPasswordEmail") @doc(description:"Reset password using email")

    createAccountOTP (
        mobileNumber: String @doc(description: "Mobile Number")
        websiteId: Int = 1 @doc (description: "Website Id")
    ): MobileCreateAccountOtpOutput @resolver(class: "Alternativetechlab\\MobileloginGraphQl\\Model\\Resolver\\CreateAccount") @doc(description:"Send Mobile OTP to create an Account")

    createAccountEmailOTP (
        email: String @doc(description: "Email")
        websiteId: Int = 1 @doc (description: "Website Id")
    ): MobileCreateAccountOtpOutput @resolver(class: "Alternativetechlab\\MobileloginGraphQl\\Model\\Resolver\\CreateAccountEmail") @doc(description:"Send Mobile OTP to create an Account Using Email")

    createCustomerAccount (
        input: CustomerInput!
        mobileNumber: String @doc(description: "Mobile Number")
        type: String @doc(description: "mobile/email")
        otp: String @doc(description: "OTP")
        websiteId: Int = 1 @doc (description: "Website Id")
    ): MobileCreateCustomerAccountOutput @resolver(class: "Alternativetechlab\\MobileloginGraphQl\\Model\\Resolver\\CreateCustomerAccount") @doc(description:"Create an Account")

    updateMobilenumber (
        newmobileNumber: String @doc(description: " New Mobile Number")
        oldmobileNumber: String @doc(description: " old Mobile Number")
        websiteId: Int = 1 @doc (description: "Website Id")
    ): UpdateMobileNumberOutput @resolver(class: "Alternativetechlab\\MobileloginGraphQl\\Model\\Resolver\\UpdateMobilenumber") @doc(description:"Update Mobile Number")

    updateEmail (
        new_email: String @doc(description: " New Email")
        old_email: String @doc(description: " old Email")
        websiteId: Int = 1 @doc (description: "Website Id")
    ): UpdateMobileNumberOutput @resolver(class: "Alternativetechlab\\MobileloginGraphQl\\Model\\Resolver\\UpdateEmail") @doc(description:"Update Email")
}

type Query {
    loginOTPVerify (
        mobileNumber: String @doc(description: "Mobile Number")
        otp: String @doc(description: "OTP")
        websiteId: Int = 1 @doc (description: "Website Id")
    ): MobileLoginVerifyOtpOutput @resolver(class: "Alternativetechlab\\MobileloginGraphQl\\Model\\Resolver\\VerifyOtp") @doc(description:"Verify Mobile OTP")

    emailLoginOTPVerify (
        email: String @doc(description: "Email")
        otp: String @doc(description: "OTP")
        websiteId: Int = 1 @doc (description: "Website Id")
    ): MobileLoginVerifyOtpOutput @resolver(class: "Alternativetechlab\\MobileloginGraphQl\\Model\\Resolver\\EmailVerifyOtp") @doc(description:"Verify Email OTP")

    forgotPassworOTPVerify (
        mobileNumber: String @doc(description: "Mobile Number")
        otp: String @doc(description: "OTP")
        websiteId: Int = 1 @doc (description: "Website Id")
    ): MobileForgotPassworOTPVerifyOtpOutput @resolver(class: "Alternativetechlab\\MobileloginGraphQl\\Model\\Resolver\\ForgotPasswordVerifyOtp") @doc(description:"Verify Forgpt Password OTP")

    forgotPasswordEmailOTPVerify (
        email: String @doc(description: "Email")
        otp: String @doc(description: "OTP")
        websiteId: Int = 1 @doc (description: "Website Id")
    ): MobileForgotPassworOTPVerifyOtpOutput @resolver(class: "Alternativetechlab\\MobileloginGraphQl\\Model\\Resolver\\ForgotPasswordEmailVerifyOtp") @doc(description:"Verify Forgpt Password Using Email OTP")

    createAccountOTPVerify (
        mobileNumber: String @doc(description: "Mobile Number")
        otp: String @doc(description: "OTP")
        websiteId: Int = 1 @doc (description: "Website Id")
    ): MobileForgotPassworOTPVerifyOtpOutput @resolver(class: "Alternativetechlab\\MobileloginGraphQl\\Model\\Resolver\\CreateAccountVerifyOtp") @doc(description:"Verify Forgpt Password OTP")

    createAccountEmailOTPVerify (
        email: String @doc(description: "Email")
        otp: String @doc(description: "OTP")
        websiteId: Int = 1 @doc (description: "Website Id")
    ): MobileForgotPassworOTPVerifyOtpOutput @resolver(class: "Alternativetechlab\\MobileloginGraphQl\\Model\\Resolver\\CreateAccountEmailVerifyOtp") @doc(description:"Create Account Using Email Verify Otp")

    updateMobileNumberOTPVerify (
        newmobileNumber: String @doc(description: " New Mobile Number")
        otp: String @doc(description: "OTP")
        oldmobileNumber: String @doc(description: " old Mobile Number")
        websiteId: Int = 1 @doc (description: "Website Id")
    ): UpdateMobileNumberVerifyOtpOtpOutput @resolver(class: "Alternativetechlab\\MobileloginGraphQl\\Model\\Resolver\\UpdateMobileNumberVerifyOtp") @doc(description:"Verify Forgpt Password OTP")

    updateEmailOTPVerify (
        new_email: String @doc(description: " New Email")
        otp: String @doc(description: "OTP")
        old_email: String @doc(description: " old email")
        websiteId: Int = 1 @doc (description: "Website Id")
    ): UpdateMobileNumberVerifyOtpOtpOutput @resolver(class: "Alternativetechlab\\MobileloginGraphQl\\Model\\Resolver\\UpdateEmailVerifyOtp") @doc(description:"Verify Update Email OTP")
}

type MobileLoginOtpOutput {
    status: Boolean
    message: String
}
type MobileLoginVerifyOtpOutput {
    status: Boolean
    message: String
    token: String
}
type MobileForgotPassworOTPOutput {
    status: Boolean
    message: String
}
type MobileForgotPassworOTPVerifyOtpOutput {
    status: Boolean
    message: String
}
type UpdateMobileNumberVerifyOtpOtpOutput {
    status: Boolean
    message: String
}
type MobileResetPassworOutput {
    status: Boolean
    message: String
}
type MobileCreateAccountOtpOutput {
    status: Boolean
    message: String
}
type MobileCreateCustomerAccountOutput {
    customer: Customer!
    status: Boolean
    message: String
}
type UpdateMobileNumberOutput {
    status: Boolean
    message: String
}
